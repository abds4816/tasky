import { getCompletedTasks } from "@/actions/getCompletedTasks";
import { getProjects } from "@/actions/getProjects";
("@/components/ChartCard");
import PageHeader from "@/components/PageHeader";
import StatisticCard from "@/components/StatisticCard";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Check, Folders, Users } from "lucide-react";
import { data } from "@/constants/tasks-classment";
import DashboardOverview from "@/components/charts/DashboardOverview";
import { getTeams } from "@/actions/getTeams";
import { getMembers } from "@/actions/getMembers";
import { User } from "lucide-react";
import MemberAvatar from "@/components/teams/members/MemberAvatar";

export const metadata = {
  title: "Dashboard | Tasky",
  description: "Generated by create next app",
};
export default async function dashboard() {
  const projects = await getProjects();
  const completedTasks = await getCompletedTasks();
  const teams = await getTeams();
  const members = await getMembers();
  return (
    <div className="flex flex-col gap-y-6 md:gap-y-8">
      <PageHeader title="dashboard" />
      {/* staistics cards */}
      <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatisticCard
          title="Total projects"
          icon={<Folders />}
          value={projects.length}
          percentageChange={100}
          description="test desc"
          unit="projects"
        />
        <StatisticCard
          title="Completed Tasks"
          icon={<Check />}
          value={completedTasks.length}
          percentageChange={100}
          description="test desc"
          unit="tasks"
        />
        <StatisticCard
          title="Total Teams"
          icon={<Users />}
          value={teams?.length!}
          percentageChange={100}
          description="test desc"
          unit="teams"
        />
        <StatisticCard
          title="Total Members"
          icon={<User />}
          value={members?.length!}
          percentageChange={100}
          description="test desc"
          unit="members"
        />
      </section>
      {/* staistics cards */}

      <section className="grid grid-cols-12 gap-4">
        <DashboardOverview data={data} />
        <Card className="col-span-12 lg:col-span-5">
          <CardHeader>
            <CardTitle>Recent news</CardTitle>
            <CardDescription>
              Your teams complete 43 tasks this week
            </CardDescription>
          </CardHeader>
          <CardContent>
            {members?.length ? (
              <ul className="flex flex-col gap-2">
                {members?.map((member, index) => (
                  <li key={index} className="flex gap-2 items-center">
                    <MemberAvatar member={member} />
                    {member.name}
                    {member.tasks.length}
                  </li>
                ))}
              </ul>
            ) : (
              <div className="h-60 grid place-content-center">
                <p className="text-muted-foreground text-sm">
                  no members here!
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
